'From Squeak5.1 of 5 September 2016 [latest update: #16549] on 7 March 2018 at 1:41:31 am'!Object subclass: #InorderTraversal	instanceVariableNames: 'root stack'	classVariableNames: ''	poolDictionaries: ''	category: 'BinTree-BinTree'!!InorderTraversal methodsFor: 'as yet unclassified' stamp: 'zs 3/7/2018 01:18'!first| tempNode tempRightNode |self resetStack.tempNode := root.[(tempNode leftKid) = nil] whileFalse: [	stack push: tempNode.	tempNode := tempNode leftKid.	].(tempNode rightKid) = nil ifTrue:[	^tempNode.	].tempRightNode := tempNode rightKid.stack push: tempRightNode.[(tempRightNode leftKid) = nil] whileFalse: [	tempRightNode := tempRightNode leftKid.	stack push: tempRightNode.	].^tempNode! !!InorderTraversal methodsFor: 'as yet unclassified' stamp: 'zs 3/7/2018 01:41'!next| tempNode tempRightNode |(stack size) = 0 ifTrue:[	^nil.	].tempNode := stack pop.(tempNode rightKid = nil) ifTrue: [	^tempNode.	].tempRightNode := tempNode rightKid.stack push: tempRightNode.[(tempRightNode leftKid) = nil] whileFalse: [	tempRightNode := tempRightNode leftKid.	stack push: tempRightNode.	].^tempNode.! !!InorderTraversal methodsFor: 'as yet unclassified' stamp: 'zs 3/6/2018 11:47'!recursiveTraversal: node	(node leftKid) = nil		ifFalse: [self recursiveTraversal: (node leftKid)].		Transcript show: node value; cr.		(node rightKid) = nil		ifFalse: [self recursiveTraversal: (node rightKid)].	! !!InorderTraversal methodsFor: 'as yet unclassified' stamp: 'zs 3/7/2018 01:09'!resetStack[stack isEmpty] whileFalse: [	stack pop.	].! !!InorderTraversal methodsFor: 'as yet unclassified' stamp: 'zs 3/6/2018 11:31'!setRoot: node	root := node! !!InorderTraversal methodsFor: 'as yet unclassified' stamp: 'zs 3/7/2018 00:57'!setStackstack := Stack new! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!InorderTraversal class	instanceVariableNames: ''!!InorderTraversal class methodsFor: 'as yet unclassified' stamp: 'zs 3/7/2018 00:57'!new: object	| temp |temp := InorderTraversal new.temp setRoot: object.temp setStack.^temp! !